// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: bets.proto

package bets

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SaveBetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlayerAddress string `protobuf:"bytes,2,opt,name=player_address,json=playerAddress,proto3" json:"player_address,omitempty"`
	RefAddress    string `protobuf:"bytes,3,opt,name=ref_address,json=refAddress,proto3" json:"ref_address,omitempty"`
	Amount        int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	RollUnder     int32  `protobuf:"varint,5,opt,name=roll_under,json=rollUnder,proto3" json:"roll_under,omitempty"`
	Seed          string `protobuf:"bytes,6,opt,name=seed,proto3" json:"seed,omitempty"`
	CreateTrxHash string `protobuf:"bytes,7,opt,name=create_trx_hash,json=createTrxHash,proto3" json:"create_trx_hash,omitempty"`
	CreateTrxLt   int64  `protobuf:"varint,8,opt,name=create_trx_lt,json=createTrxLt,proto3" json:"create_trx_lt,omitempty"`
}

func (x *SaveBetRequest) Reset() {
	*x = SaveBetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveBetRequest) ProtoMessage() {}

func (x *SaveBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveBetRequest.ProtoReflect.Descriptor instead.
func (*SaveBetRequest) Descriptor() ([]byte, []int) {
	return file_bets_proto_rawDescGZIP(), []int{0}
}

func (x *SaveBetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SaveBetRequest) GetPlayerAddress() string {
	if x != nil {
		return x.PlayerAddress
	}
	return ""
}

func (x *SaveBetRequest) GetRefAddress() string {
	if x != nil {
		return x.RefAddress
	}
	return ""
}

func (x *SaveBetRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SaveBetRequest) GetRollUnder() int32 {
	if x != nil {
		return x.RollUnder
	}
	return 0
}

func (x *SaveBetRequest) GetSeed() string {
	if x != nil {
		return x.Seed
	}
	return ""
}

func (x *SaveBetRequest) GetCreateTrxHash() string {
	if x != nil {
		return x.CreateTrxHash
	}
	return ""
}

func (x *SaveBetRequest) GetCreateTrxLt() int64 {
	if x != nil {
		return x.CreateTrxLt
	}
	return 0
}

type SaveBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	State     int32                `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SaveBetResponse) Reset() {
	*x = SaveBetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveBetResponse) ProtoMessage() {}

func (x *SaveBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveBetResponse.ProtoReflect.Descriptor instead.
func (*SaveBetResponse) Descriptor() ([]byte, []int) {
	return file_bets_proto_rawDescGZIP(), []int{1}
}

func (x *SaveBetResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SaveBetResponse) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SaveBetResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateBetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	State          int32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	RandomRoll     int32  `protobuf:"varint,3,opt,name=random_roll,json=randomRoll,proto3" json:"random_roll,omitempty"`
	Signature      string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	PlayerPayout   int64  `protobuf:"varint,5,opt,name=player_payout,json=playerPayout,proto3" json:"player_payout,omitempty"`
	RefPayout      int64  `protobuf:"varint,6,opt,name=ref_payout,json=refPayout,proto3" json:"ref_payout,omitempty"`
	ResolveTrxHash string `protobuf:"bytes,7,opt,name=resolve_trx_hash,json=resolveTrxHash,proto3" json:"resolve_trx_hash,omitempty"`
	ResolveTrxLt   int64  `protobuf:"varint,8,opt,name=resolve_trx_lt,json=resolveTrxLt,proto3" json:"resolve_trx_lt,omitempty"`
}

func (x *UpdateBetRequest) Reset() {
	*x = UpdateBetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBetRequest) ProtoMessage() {}

func (x *UpdateBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBetRequest.ProtoReflect.Descriptor instead.
func (*UpdateBetRequest) Descriptor() ([]byte, []int) {
	return file_bets_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateBetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBetRequest) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UpdateBetRequest) GetRandomRoll() int32 {
	if x != nil {
		return x.RandomRoll
	}
	return 0
}

func (x *UpdateBetRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *UpdateBetRequest) GetPlayerPayout() int64 {
	if x != nil {
		return x.PlayerPayout
	}
	return 0
}

func (x *UpdateBetRequest) GetRefPayout() int64 {
	if x != nil {
		return x.RefPayout
	}
	return 0
}

func (x *UpdateBetRequest) GetResolveTrxHash() string {
	if x != nil {
		return x.ResolveTrxHash
	}
	return ""
}

func (x *UpdateBetRequest) GetResolveTrxLt() int64 {
	if x != nil {
		return x.ResolveTrxLt
	}
	return 0
}

type UpdateBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	State     int32                `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UpdateBetResponse) Reset() {
	*x = UpdateBetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBetResponse) ProtoMessage() {}

func (x *UpdateBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBetResponse.ProtoReflect.Descriptor instead.
func (*UpdateBetResponse) Descriptor() ([]byte, []int) {
	return file_bets_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateBetResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBetResponse) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UpdateBetResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetBetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBetRequest) Reset() {
	*x = GetBetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBetRequest) ProtoMessage() {}

func (x *GetBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBetRequest.ProtoReflect.Descriptor instead.
func (*GetBetRequest) Descriptor() ([]byte, []int) {
	return file_bets_proto_rawDescGZIP(), []int{4}
}

func (x *GetBetRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount         int64                `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	State          int32                `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	RollUnder      int32                `protobuf:"varint,4,opt,name=roll_under,json=rollUnder,proto3" json:"roll_under,omitempty"`
	PlayerAddress  string               `protobuf:"bytes,5,opt,name=player_address,json=playerAddress,proto3" json:"player_address,omitempty"`
	RefAddress     string               `protobuf:"bytes,6,opt,name=ref_address,json=refAddress,proto3" json:"ref_address,omitempty"`
	Seed           string               `protobuf:"bytes,7,opt,name=seed,proto3" json:"seed,omitempty"`
	Signature      string               `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	RandomRoll     int32                `protobuf:"varint,9,opt,name=random_roll,json=randomRoll,proto3" json:"random_roll,omitempty"`
	PlayerPayout   int64                `protobuf:"varint,10,opt,name=player_payout,json=playerPayout,proto3" json:"player_payout,omitempty"`
	RefPayout      int64                `protobuf:"varint,11,opt,name=ref_payout,json=refPayout,proto3" json:"ref_payout,omitempty"`
	CreatedAt      *timestamp.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreateTrxHash  string               `protobuf:"bytes,13,opt,name=create_trx_hash,json=createTrxHash,proto3" json:"create_trx_hash,omitempty"`
	CreateTrxLt    int64                `protobuf:"varint,14,opt,name=create_trx_lt,json=createTrxLt,proto3" json:"create_trx_lt,omitempty"`
	UpdatedAt      *timestamp.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ResolveTrxHash string               `protobuf:"bytes,16,opt,name=resolve_trx_hash,json=resolveTrxHash,proto3" json:"resolve_trx_hash,omitempty"`
	ResolveTrxLt   int64                `protobuf:"varint,17,opt,name=resolve_trx_lt,json=resolveTrxLt,proto3" json:"resolve_trx_lt,omitempty"`
}

func (x *GetBetResponse) Reset() {
	*x = GetBetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBetResponse) ProtoMessage() {}

func (x *GetBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBetResponse.ProtoReflect.Descriptor instead.
func (*GetBetResponse) Descriptor() ([]byte, []int) {
	return file_bets_proto_rawDescGZIP(), []int{5}
}

func (x *GetBetResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetBetResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetBetResponse) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GetBetResponse) GetRollUnder() int32 {
	if x != nil {
		return x.RollUnder
	}
	return 0
}

func (x *GetBetResponse) GetPlayerAddress() string {
	if x != nil {
		return x.PlayerAddress
	}
	return ""
}

func (x *GetBetResponse) GetRefAddress() string {
	if x != nil {
		return x.RefAddress
	}
	return ""
}

func (x *GetBetResponse) GetSeed() string {
	if x != nil {
		return x.Seed
	}
	return ""
}

func (x *GetBetResponse) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *GetBetResponse) GetRandomRoll() int32 {
	if x != nil {
		return x.RandomRoll
	}
	return 0
}

func (x *GetBetResponse) GetPlayerPayout() int64 {
	if x != nil {
		return x.PlayerPayout
	}
	return 0
}

func (x *GetBetResponse) GetRefPayout() int64 {
	if x != nil {
		return x.RefPayout
	}
	return 0
}

func (x *GetBetResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetBetResponse) GetCreateTrxHash() string {
	if x != nil {
		return x.CreateTrxHash
	}
	return ""
}

func (x *GetBetResponse) GetCreateTrxLt() int64 {
	if x != nil {
		return x.CreateTrxLt
	}
	return 0
}

func (x *GetBetResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GetBetResponse) GetResolveTrxHash() string {
	if x != nil {
		return x.ResolveTrxHash
	}
	return ""
}

func (x *GetBetResponse) GetResolveTrxLt() int64 {
	if x != nil {
		return x.ResolveTrxLt
	}
	return 0
}

type IsBetSavedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IsBetSavedRequest) Reset() {
	*x = IsBetSavedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBetSavedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBetSavedRequest) ProtoMessage() {}

func (x *IsBetSavedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBetSavedRequest.ProtoReflect.Descriptor instead.
func (*IsBetSavedRequest) Descriptor() ([]byte, []int) {
	return file_bets_proto_rawDescGZIP(), []int{6}
}

func (x *IsBetSavedRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IsBetSavedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSaved bool `protobuf:"varint,1,opt,name=is_saved,json=isSaved,proto3" json:"is_saved,omitempty"`
}

func (x *IsBetSavedResponse) Reset() {
	*x = IsBetSavedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBetSavedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBetSavedResponse) ProtoMessage() {}

func (x *IsBetSavedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBetSavedResponse.ProtoReflect.Descriptor instead.
func (*IsBetSavedResponse) Descriptor() ([]byte, []int) {
	return file_bets_proto_rawDescGZIP(), []int{7}
}

func (x *IsBetSavedResponse) GetIsSaved() bool {
	if x != nil {
		return x.IsSaved
	}
	return false
}

type IsBetResolvedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IsBetResolvedRequest) Reset() {
	*x = IsBetResolvedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBetResolvedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBetResolvedRequest) ProtoMessage() {}

func (x *IsBetResolvedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBetResolvedRequest.ProtoReflect.Descriptor instead.
func (*IsBetResolvedRequest) Descriptor() ([]byte, []int) {
	return file_bets_proto_rawDescGZIP(), []int{8}
}

func (x *IsBetResolvedRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IsBetResolvedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsResolved bool `protobuf:"varint,1,opt,name=is_resolved,json=isResolved,proto3" json:"is_resolved,omitempty"`
}

func (x *IsBetResolvedResponse) Reset() {
	*x = IsBetResolvedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBetResolvedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBetResolvedResponse) ProtoMessage() {}

func (x *IsBetResolvedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBetResolvedResponse.ProtoReflect.Descriptor instead.
func (*IsBetResolvedResponse) Descriptor() ([]byte, []int) {
	return file_bets_proto_rawDescGZIP(), []int{9}
}

func (x *IsBetResolvedResponse) GetIsResolved() bool {
	if x != nil {
		return x.IsResolved
	}
	return false
}

var File_bets_proto protoreflect.FileDescriptor

var file_bets_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x62, 0x65,
	0x74, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x66, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x6c,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x78, 0x5f,
	0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x78, 0x4c, 0x74, 0x22, 0x72, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x72,
	0x6f, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x5f,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x5f, 0x74, 0x72, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x72, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x78,
	0x5f, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x54, 0x72, 0x78, 0x4c, 0x74, 0x22, 0x74, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x1f, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xde,
	0x04, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x66, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x72, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x78, 0x5f, 0x6c,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x78, 0x4c, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x54, 0x72, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x78, 0x5f, 0x6c, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x72, 0x78, 0x4c, 0x74, 0x22,
	0x23, 0x0a, 0x11, 0x49, 0x73, 0x42, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x12, 0x49, 0x73, 0x42, 0x65, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x49, 0x73, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a,
	0x15, 0x49, 0x73, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x32, 0xc6, 0x02, 0x0a, 0x04, 0x42, 0x65, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x07, 0x53, 0x61, 0x76, 0x65, 0x42, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x62, 0x65,
	0x74, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x62, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x62, 0x65, 0x74, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x62, 0x65, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x42, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x62, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x65, 0x74, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x0a, 0x49, 0x73, 0x42, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x12,
	0x17, 0x2e, 0x62, 0x65, 0x74, 0x73, 0x2e, 0x49, 0x73, 0x42, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x65, 0x74, 0x73, 0x2e,
	0x49, 0x73, 0x42, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x49, 0x73, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x62, 0x65, 0x74, 0x73, 0x2e, 0x49, 0x73, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x65, 0x74, 0x73, 0x2e, 0x49, 0x73, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x62, 0x65, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bets_proto_rawDescOnce sync.Once
	file_bets_proto_rawDescData = file_bets_proto_rawDesc
)

func file_bets_proto_rawDescGZIP() []byte {
	file_bets_proto_rawDescOnce.Do(func() {
		file_bets_proto_rawDescData = protoimpl.X.CompressGZIP(file_bets_proto_rawDescData)
	})
	return file_bets_proto_rawDescData
}

var file_bets_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_bets_proto_goTypes = []interface{}{
	(*SaveBetRequest)(nil),        // 0: bets.SaveBetRequest
	(*SaveBetResponse)(nil),       // 1: bets.SaveBetResponse
	(*UpdateBetRequest)(nil),      // 2: bets.UpdateBetRequest
	(*UpdateBetResponse)(nil),     // 3: bets.UpdateBetResponse
	(*GetBetRequest)(nil),         // 4: bets.GetBetRequest
	(*GetBetResponse)(nil),        // 5: bets.GetBetResponse
	(*IsBetSavedRequest)(nil),     // 6: bets.IsBetSavedRequest
	(*IsBetSavedResponse)(nil),    // 7: bets.IsBetSavedResponse
	(*IsBetResolvedRequest)(nil),  // 8: bets.IsBetResolvedRequest
	(*IsBetResolvedResponse)(nil), // 9: bets.IsBetResolvedResponse
	(*timestamp.Timestamp)(nil),   // 10: google.protobuf.Timestamp
}
var file_bets_proto_depIdxs = []int32{
	10, // 0: bets.SaveBetResponse.updated_at:type_name -> google.protobuf.Timestamp
	10, // 1: bets.UpdateBetResponse.updated_at:type_name -> google.protobuf.Timestamp
	10, // 2: bets.GetBetResponse.created_at:type_name -> google.protobuf.Timestamp
	10, // 3: bets.GetBetResponse.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 4: bets.Bets.SaveBet:input_type -> bets.SaveBetRequest
	2,  // 5: bets.Bets.UpdateBet:input_type -> bets.UpdateBetRequest
	4,  // 6: bets.Bets.GetBet:input_type -> bets.GetBetRequest
	6,  // 7: bets.Bets.IsBetSaved:input_type -> bets.IsBetSavedRequest
	8,  // 8: bets.Bets.IsBetResolved:input_type -> bets.IsBetResolvedRequest
	1,  // 9: bets.Bets.SaveBet:output_type -> bets.SaveBetResponse
	3,  // 10: bets.Bets.UpdateBet:output_type -> bets.UpdateBetResponse
	5,  // 11: bets.Bets.GetBet:output_type -> bets.GetBetResponse
	7,  // 12: bets.Bets.IsBetSaved:output_type -> bets.IsBetSavedResponse
	9,  // 13: bets.Bets.IsBetResolved:output_type -> bets.IsBetResolvedResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_bets_proto_init() }
func file_bets_proto_init() {
	if File_bets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveBetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveBetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBetSavedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBetSavedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBetResolvedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBetResolvedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bets_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bets_proto_goTypes,
		DependencyIndexes: file_bets_proto_depIdxs,
		MessageInfos:      file_bets_proto_msgTypes,
	}.Build()
	File_bets_proto = out.File
	file_bets_proto_rawDesc = nil
	file_bets_proto_goTypes = nil
	file_bets_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BetsClient is the client API for Bets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BetsClient interface {
	SaveBet(ctx context.Context, in *SaveBetRequest, opts ...grpc.CallOption) (*SaveBetResponse, error)
	UpdateBet(ctx context.Context, in *UpdateBetRequest, opts ...grpc.CallOption) (*UpdateBetResponse, error)
	GetBet(ctx context.Context, in *GetBetRequest, opts ...grpc.CallOption) (*GetBetResponse, error)
	IsBetSaved(ctx context.Context, in *IsBetSavedRequest, opts ...grpc.CallOption) (*IsBetSavedResponse, error)
	IsBetResolved(ctx context.Context, in *IsBetResolvedRequest, opts ...grpc.CallOption) (*IsBetResolvedResponse, error)
}

type betsClient struct {
	cc grpc.ClientConnInterface
}

func NewBetsClient(cc grpc.ClientConnInterface) BetsClient {
	return &betsClient{cc}
}

func (c *betsClient) SaveBet(ctx context.Context, in *SaveBetRequest, opts ...grpc.CallOption) (*SaveBetResponse, error) {
	out := new(SaveBetResponse)
	err := c.cc.Invoke(ctx, "/bets.Bets/SaveBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsClient) UpdateBet(ctx context.Context, in *UpdateBetRequest, opts ...grpc.CallOption) (*UpdateBetResponse, error) {
	out := new(UpdateBetResponse)
	err := c.cc.Invoke(ctx, "/bets.Bets/UpdateBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsClient) GetBet(ctx context.Context, in *GetBetRequest, opts ...grpc.CallOption) (*GetBetResponse, error) {
	out := new(GetBetResponse)
	err := c.cc.Invoke(ctx, "/bets.Bets/GetBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsClient) IsBetSaved(ctx context.Context, in *IsBetSavedRequest, opts ...grpc.CallOption) (*IsBetSavedResponse, error) {
	out := new(IsBetSavedResponse)
	err := c.cc.Invoke(ctx, "/bets.Bets/IsBetSaved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsClient) IsBetResolved(ctx context.Context, in *IsBetResolvedRequest, opts ...grpc.CallOption) (*IsBetResolvedResponse, error) {
	out := new(IsBetResolvedResponse)
	err := c.cc.Invoke(ctx, "/bets.Bets/IsBetResolved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BetsServer is the server API for Bets service.
type BetsServer interface {
	SaveBet(context.Context, *SaveBetRequest) (*SaveBetResponse, error)
	UpdateBet(context.Context, *UpdateBetRequest) (*UpdateBetResponse, error)
	GetBet(context.Context, *GetBetRequest) (*GetBetResponse, error)
	IsBetSaved(context.Context, *IsBetSavedRequest) (*IsBetSavedResponse, error)
	IsBetResolved(context.Context, *IsBetResolvedRequest) (*IsBetResolvedResponse, error)
}

// UnimplementedBetsServer can be embedded to have forward compatible implementations.
type UnimplementedBetsServer struct {
}

func (*UnimplementedBetsServer) SaveBet(context.Context, *SaveBetRequest) (*SaveBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBet not implemented")
}
func (*UnimplementedBetsServer) UpdateBet(context.Context, *UpdateBetRequest) (*UpdateBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBet not implemented")
}
func (*UnimplementedBetsServer) GetBet(context.Context, *GetBetRequest) (*GetBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBet not implemented")
}
func (*UnimplementedBetsServer) IsBetSaved(context.Context, *IsBetSavedRequest) (*IsBetSavedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBetSaved not implemented")
}
func (*UnimplementedBetsServer) IsBetResolved(context.Context, *IsBetResolvedRequest) (*IsBetResolvedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBetResolved not implemented")
}

func RegisterBetsServer(s *grpc.Server, srv BetsServer) {
	s.RegisterService(&_Bets_serviceDesc, srv)
}

func _Bets_SaveBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsServer).SaveBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bets.Bets/SaveBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsServer).SaveBet(ctx, req.(*SaveBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bets_UpdateBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsServer).UpdateBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bets.Bets/UpdateBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsServer).UpdateBet(ctx, req.(*UpdateBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bets_GetBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsServer).GetBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bets.Bets/GetBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsServer).GetBet(ctx, req.(*GetBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bets_IsBetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBetSavedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsServer).IsBetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bets.Bets/IsBetSaved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsServer).IsBetSaved(ctx, req.(*IsBetSavedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bets_IsBetResolved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBetResolvedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsServer).IsBetResolved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bets.Bets/IsBetResolved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsServer).IsBetResolved(ctx, req.(*IsBetResolvedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bets.Bets",
	HandlerType: (*BetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveBet",
			Handler:    _Bets_SaveBet_Handler,
		},
		{
			MethodName: "UpdateBet",
			Handler:    _Bets_UpdateBet_Handler,
		},
		{
			MethodName: "GetBet",
			Handler:    _Bets_GetBet_Handler,
		},
		{
			MethodName: "IsBetSaved",
			Handler:    _Bets_IsBetSaved_Handler,
		},
		{
			MethodName: "IsBetResolved",
			Handler:    _Bets_IsBetResolved_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bets.proto",
}
